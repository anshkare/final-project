#| echo: false
library(tidyverse)
library(brms)
library(dplyr)
library(readr)
show_file("README.md", pattern = "http")
library(tutorial.helpers)
show_file("README.md", pattern = "http")
show_file("README.md", pattern = "http")
show_file("README.md", pattern = "http")
show_file("README.md", pattern = "http")
show_file("README.md")
fit <- brm(
formula = assists ~ age + turnovers + point_difference ,
data = kobe_data,
family = gaussian(),
chains = 4,
iter = 2000,
warmup = 1000,
silent =2,
refresh = 0,
seed = 9
)
#| echo: false
kobe_data <- read_csv("kobebryant.csv")
kobe_data$game_type <- ifelse(kobe_data$game_type == "playoff", 1, 0)
names(kobe_data) <- gsub("^\\d", "var_", names(kobe_data))
kobe_data$assists <- as.numeric(kobe_data$assists)
kobe_data$fieldgoal_percent <- as.numeric(kobe_data$fieldgoal_percent)
kobe_data$point_difference <- as.numeric(kobe_data$point_difference)
kobe_data$turnovers <- as.numeric(kobe_data$turnovers)
kobe_data$season <- as.numeric(kobe_data$season)
kobe_data <- na.omit(kobe_data)
#| echo: false
library(tidyverse)
library(brms)
library(dplyr)
library(readr)
fit <- brm(
formula = assists ~ age + turnovers + point_difference ,
data = kobe_data,
family = gaussian(),
chains = 4,
iter = 2000,
warmup = 1000,
silent =2,
refresh = 0,
seed = 9
)
preds <- posterior_predict(fit)
# Calculate the mean of the predictions
kobe_data$predicted_assists <- apply(preds, 2, mean)
# Create ggplot
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_point() +
geom_abline(intercept = 0, slope = 1, linetype = "dashed") +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
fit <- brm(
formula = assists ~ age + turnovers + point_difference ,
data = kobe_data,
family = gaussian(),
chains = 4,
iter = 2000,
warmup = 1000,
silent =2,
refresh = 0,
seed = 9
)
preds <- posterior_predict(fit)
# Calculate the mean of the predictions
kobe_data$predicted_assists <- apply(preds, 2, mean)
# Create ggplot
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_histogram()  +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
preds <- posterior_predict(fit)
# Calculate the mean of the predictions
kobe_data$predicted_assists <- apply(preds, 2, mean)
# Create ggplot
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_bar()  +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
preds <- posterior_predict(fit)
# Calculate the mean of the predictions
kobe_data$predicted_assists <- apply(preds, 2, mean)
# Create ggplot
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_bar(aes(fill = assists))  +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_point(aes(color = assists)) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
fixef(fit)
ggplot(kobe_data, aes(x = assists, y = predicted_assists)) +
geom_point(aes(color = assists)) +
geom_smooth(method = "lm", color = "blue", se = FALSE) +
labs(x = "Actual Assists", y = "Predicted Assists",
title = "Actual vs. Predicted Assists") +
theme_minimal()
show_file("index.qmd")
show_file("index.qmd", pattern = "About this site")
show_file("model.qmd")
git config pull.rebase false  # merge
